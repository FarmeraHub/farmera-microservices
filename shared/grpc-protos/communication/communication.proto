syntax = "proto3";

package farmera.communication;

import "common/types.proto";import "common/enums.proto";import "common/pagination.proto";

option go_package = "github.com/farmera/grpc-protos/communication";

// Communication service definition
service CommunicationService {
  // Conversation management
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);
  rpc CreatePrivateConversation(CreatePrivateConversationRequest) returns (CreatePrivateConversationResponse);
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);
  // rpc JoinConversation(JoinConversationRequest) returns (JoinConversationResponse);
  // rpc LeaveConversation(LeaveConversationRequest) returns (LeaveConversationResponse);
  // rpc AddParticipant(AddParticipantRequest) returns (AddParticipantResponse);
  // rpc RemoveParticipant(RemoveParticipantRequest) returns (RemoveParticipantResponse);
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse);
  rpc GetConversationParticipants(GetConversationParticipantsRequest) returns (GetConversationParticipantsResponse);
  rpc GetConversationMessages(GetConversationMessagesRequest) returns (GetConversationMessagesResponse);
 
  // Message management
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse);
  // rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse);
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
  // rpc MarkMessageRead(MarkMessageReadRequest) returns (MarkMessageReadResponse);
  
  // Real-time messaging streams
  // rpc StreamMessages(StreamMessagesRequest) returns (stream MessageEvent);
  // rpc StreamConversationUpdates(StreamConversationUpdatesRequest) returns (stream ConversationEvent);
  // rpc StreamUserPresence(StreamUserPresenceRequest) returns (stream PresenceEvent);
  
  // File attachments
  // rpc UploadAttachment(stream UploadAttachmentRequest) returns (UploadAttachmentResponse);
  // rpc GetAttachment(GetAttachmentRequest) returns (GetAttachmentResponse);
  // rpc DeleteAttachment(DeleteAttachmentRequest) returns (DeleteAttachmentResponse);
  // rpc GetMessageAttachments(GetMessageAttachmentsRequest) returns (GetMessageAttachmentsResponse);
    
  // Message search and filtering
  // rpc SearchMessages(SearchMessagesRequest) returns (SearchMessagesResponse);
  // rpc SearchConversations(SearchConversationsRequest) returns (SearchConversationsResponse);

  // Users
  rpc CheckOnlineUser(CheckOnlineUserRequest) returns (CheckOnlineUserResponse);
}

// Common
message UserConversation {
  int64 id = 1;
  int32 conversation_id = 2;
  string user_id = 3;
  optional farmera.common.Timestamp deleted_at = 4;
}

message ConversationMessage {
  int64 message_id = 1;
  int32 conversation_id = 2;
  string sender_id = 3;
  optional string content = 4;
  farmera.common.Timestamp sent_at = 5;
  farmera.common.MessageType type = 6;
  bool is_read = 7;
}

message ConversationDTO {
  int64 id = 1;
  int32 conversation_id = 2;
  string title = 3;
  optional int64 message_id = 4;
  optional string sender_id = 5;
  optional string content = 6;
  optional farmera.common.Timestamp sent_at = 7;
  optional bool is_read = 8;
  optional farmera.common.MessageType type = 9;
  repeated string participants = 10;
  farmera.common.Timestamp created_at = 11;
}

// Conversation
// Create conversation
message CreateConversationRequest {
  string title = 1;
}

message CreateConversationResponse {
  int32 conversation_id = 1;
  string title = 2;
  optional int64 latest_message = 3;
  farmera.common.Timestamp created_at = 4;
}

// Create private conversation
message CreatePrivateConversationRequest {
  string title = 1;
  string user_a = 2;
  string user_b = 3;
}

message CreatePrivateConversationResponse {
  int32 conversation_id = 1;
  string title = 2;
  optional int64 latest_message = 3;
  farmera.common.Timestamp created_at = 4;
}

// Get Conversation
message GetConversationRequest {
  int32 conversation_id = 1;
}

message GetConversationResponse {
  int32 conversation_id = 1;
  string title = 2;
  optional int64 latest_message = 3;
  farmera.common.Timestamp created_at = 4;
}

// List conversation
message ListConversationsRequest {
  string user_id = 1;
  farmera.common.SimplePaginationRequest pagination = 2;
}

message ListConversationsResponse {
  repeated ConversationDTO conversations = 1;
}

// Delete conversation
message DeleteConversationRequest {
  int32 conversation_id = 1;
}

message DeleteConversationResponse {
  bool success = 1;
}

// Get participants
message GetConversationParticipantsRequest {
  int32 conversation_id = 1;
  string user_id = 2;
}

message GetConversationParticipantsResponse {
 repeated UserConversation participants = 1;
}

// Get conversation messages
message GetConversationMessagesRequest {
  int32 conversation_id = 1;
  string user_id = 2;
  optional farmera.common.Timestamp before = 3;
  optional int32 limit = 4;
}

message GetConversationMessagesResponse {
  repeated ConversationMessage messages = 1;
}

// Message
// Get message
message GetMessageRequest {
  int64 message_id = 1;
}

message GetMessageResponse {
  int64 message_id = 1;
  int32 conversation_id = 2;
  string sender_id = 3;
  optional string content = 4;
  farmera.common.Timestamp sent_at = 5;
  farmera.common.MessageType type = 6;
}

// Delete message
message DeleteMessageRequest {
  int64 message_id = 1;
  string user_id = 2;
}

message DeleteMessageResponse {
  bool success = 1;
}

// Attachment

// Users
message CheckOnlineUserRequest {
  string user_id = 1;
}

message CheckOnlineUserResponse {
  bool is_online = 1;
}