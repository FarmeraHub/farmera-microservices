syntax = "proto3";

package farmera.notification;

import "common/types.proto";
import "common/enums.proto";
import "common/pagination.proto";
import "common/errors.proto";

option go_package = "github.com/farmera/grpc-protos/notification";

// Notification service definition
service NotificationService {
  // Notification management
  rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);
  rpc GetNotification(GetNotificationRequest) returns (GetNotificationResponse);
  rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse);
  rpc DeleteNotification(DeleteNotificationRequest) returns (DeleteNotificationResponse);
  
  // Template management
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateResponse);
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse);
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
  
  // Sending notifications
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);
  rpc SendBulkNotification(SendBulkNotificationRequest) returns (SendBulkNotificationResponse);
  rpc SendTemplateNotification(SendTemplateNotificationRequest) returns (SendTemplateNotificationResponse);
  rpc SendPushNotification(SendPushNotificationRequest) returns (SendPushNotificationResponse);
  rpc SendEmailNotification(SendEmailNotificationRequest) returns (SendEmailNotificationResponse);
  
  // User preferences
  rpc CreateUserPreferences(CreateUserPreferencesRequest) returns (CreateUserPreferencesResponse);
  rpc GetUserPreferences(GetUserPreferencesRequest) returns (GetUserPreferencesResponse);
  rpc UpdateUserPreferences(UpdateUserPreferencesRequest) returns (UpdateUserPreferencesResponse);
  rpc DeleteUserPreferences(DeleteUserPreferencesRequest) returns (DeleteUserPreferencesResponse);
  
  // Device management
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse);
  rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse);
  rpc UnregisterDevice(UnregisterDeviceRequest) returns (UnregisterDeviceResponse);
  rpc ListUserDevices(ListUserDevicesRequest) returns (ListUserDevicesResponse);
  
  // Notification history and tracking
  rpc GetNotificationHistory(GetNotificationHistoryRequest) returns (GetNotificationHistoryResponse);
  rpc MarkNotificationRead(MarkNotificationReadRequest) returns (MarkNotificationReadResponse);
  rpc GetNotificationStats(GetNotificationStatsRequest) returns (GetNotificationStatsResponse);
  
  // Subscription management
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
}

// Notification message definition
message Notification {
  int32 notification_id = 1;
  string user_id = 2;
  farmera.common.NotificationType type = 3;
  string title = 4;
  string message = 5;
  map<string, string> data = 6; // Additional data payload
  farmera.common.NotificationPriority priority = 7;
  repeated farmera.common.NotificationChannel channels = 8;
  bool is_read = 9;
  farmera.common.Timestamp created_at = 10;
  farmera.common.Timestamp read_at = 11;
  farmera.common.Timestamp expires_at = 12;
  string action_url = 13;
  string image_url = 14;
  string icon_url = 15;
  NotificationDeliveryStatus delivery_status = 16;
  repeated NotificationAttempt delivery_attempts = 17;
}

// Notification template definition
message NotificationTemplate {
  int32 template_id = 1;
  string name = 2;
  string description = 3;
  farmera.common.NotificationType type = 4;
  string subject = 5; // For email notifications
  string title_template = 6;
  string message_template = 7;
  string html_template = 8; // For email notifications
  repeated string required_variables = 9;
  map<string, string> default_variables = 10;
  bool is_active = 11;
  farmera.common.Timestamp created_at = 12;
  farmera.common.Timestamp updated_at = 13;
  string created_by = 14;
  TemplateConfiguration configuration = 15;
}

// Template configuration
message TemplateConfiguration {
  repeated farmera.common.NotificationChannel enabled_channels = 1;
  farmera.common.NotificationPriority default_priority = 2;
  int32 ttl_seconds = 3; // Time to live
  bool allow_duplicate = 4;
  string category = 5;
  map<string, string> metadata = 6;
}

// User notification preferences
message UserNotificationPreferences {
  string user_id = 1;
  repeated ChannelPreference channel_preferences = 2;
  repeated TypePreference type_preferences = 3;
  bool global_enabled = 4;
  string timezone = 5;
  QuietHours quiet_hours = 6;
  farmera.common.Timestamp created_at = 7;
  farmera.common.Timestamp updated_at = 8;
}

// Channel preference (push, email, sms)
message ChannelPreference {
  farmera.common.NotificationChannel channel = 1;
  bool enabled = 2;
  map<string, string> settings = 3; // Channel-specific settings
}

// Type preference (order updates, promotions, etc.)
message TypePreference {
  farmera.common.NotificationType type = 1;
  bool enabled = 2;
  repeated farmera.common.NotificationChannel allowed_channels = 3;
  farmera.common.NotificationPriority minimum_priority = 4;
}

// Quiet hours configuration
message QuietHours {
  bool enabled = 1;
  string start_time = 2; // HH:MM format
  string end_time = 3; // HH:MM format
  repeated int32 excluded_days = 4; // 0=Sunday, 1=Monday, etc.
  repeated farmera.common.NotificationType excluded_types = 5; // Types that ignore quiet hours
}

// User device for push notifications
message UserDevice {
  string device_id = 1;
  string user_id = 2;
  string fcm_token = 3;
  string device_type = 4; // "ios", "android", "web"
  string device_name = 5;
  string app_version = 6;
  string os_version = 7;
  bool is_active = 8;
  farmera.common.Timestamp registered_at = 9;
  farmera.common.Timestamp last_seen = 10;
  map<string, string> metadata = 11;
}

// Notification delivery status
message NotificationDeliveryStatus {
  repeated ChannelDeliveryStatus channel_status = 1;
  bool all_delivered = 2;
  bool any_delivered = 3;
  farmera.common.Timestamp last_attempt = 4;
  int32 total_attempts = 5;
}

// Channel-specific delivery status
message ChannelDeliveryStatus {
  farmera.common.NotificationChannel channel = 1;
  DeliveryStatus status = 2;
  string provider_id = 3; // External provider message ID
  string error_message = 4;
  farmera.common.Timestamp delivered_at = 5;
  farmera.common.Timestamp opened_at = 6;
  farmera.common.Timestamp clicked_at = 7;
  
  enum DeliveryStatus {
    DELIVERY_STATUS_UNSPECIFIED = 0;
    DELIVERY_STATUS_PENDING = 1;
    DELIVERY_STATUS_SENT = 2;
    DELIVERY_STATUS_DELIVERED = 3;
    DELIVERY_STATUS_FAILED = 4;
    DELIVERY_STATUS_OPENED = 5;
    DELIVERY_STATUS_CLICKED = 6;
    DELIVERY_STATUS_BOUNCED = 7;
    DELIVERY_STATUS_SPAM = 8;
  }
}

// Notification delivery attempt
message NotificationAttempt {
  int32 attempt_number = 1;
  farmera.common.NotificationChannel channel = 2;
  farmera.common.Timestamp attempted_at = 3;
  bool success = 4;
  string error_message = 5;
  string provider_response = 6;
  int32 retry_after_seconds = 7;
}

// Subscription for specific notification types
message NotificationSubscription {
  string subscription_id = 1;
  string user_id = 2;
  string topic = 3; // "product_updates", "farm_news", etc.
  repeated farmera.common.NotificationType types = 4;
  repeated farmera.common.NotificationChannel channels = 5;
  map<string, string> filters = 6; // Subscription filters
  bool is_active = 7;
  farmera.common.Timestamp created_at = 8;
  farmera.common.Timestamp updated_at = 9;
}

// Push notification specific data
message PushNotificationData {
  string title = 1;
  string body = 2;
  string icon = 3;
  string image = 4;
  string click_action = 5;
  string sound = 6;
  string badge = 7;
  map<string, string> custom_data = 8;
}

// Email notification specific data
message EmailNotificationData {
  string subject = 1;
  string from_email = 2;
  string from_name = 3;
  string reply_to = 4;
  string html_content = 5;
  string text_content = 6;
  repeated EmailAttachment attachments = 7;
  map<string, string> headers = 8;
}

// Email attachment
message EmailAttachment {
  string filename = 1;
  string content_type = 2;
  bytes content = 3;
  string content_id = 4; // For inline attachments
}

// Notification management requests/responses
message CreateNotificationRequest {
  string user_id = 1;
  farmera.common.NotificationType type = 2;
  string title = 3;
  string message = 4;
  map<string, string> data = 5;
  farmera.common.NotificationPriority priority = 6;
  repeated farmera.common.NotificationChannel channels = 7;
  string action_url = 8;
  string image_url = 9;
  farmera.common.Timestamp expires_at = 10;
}

message CreateNotificationResponse {
  Notification notification = 1;
}

message GetNotificationRequest {
  int32 notification_id = 1;
}

message GetNotificationResponse {
  Notification notification = 1;
}

message ListNotificationsRequest {
  string user_id = 1;
  farmera.common.PaginationRequest pagination = 2;
  optional farmera.common.NotificationType type_filter = 3;
  optional bool unread_only = 4;
  optional farmera.common.TimeRange date_range = 5;
}

message ListNotificationsResponse {
  repeated Notification notifications = 1;
  farmera.common.PaginationResponse pagination = 2;
  int32 unread_count = 3;
}

message DeleteNotificationRequest {
  int32 notification_id = 1;
  string user_id = 2;
}

message DeleteNotificationResponse {
  bool success = 1;
}

// Template management requests/responses
message CreateTemplateRequest {
  string name = 1;
  string description = 2;
  farmera.common.NotificationType type = 3;
  string subject = 4;
  string title_template = 5;
  string message_template = 6;
  string html_template = 7;
  repeated string required_variables = 8;
  map<string, string> default_variables = 9;
  TemplateConfiguration configuration = 10;
}

message CreateTemplateResponse {
  NotificationTemplate template = 1;
}

message GetTemplateRequest {
  int32 template_id = 1;
}

message GetTemplateResponse {
  NotificationTemplate template = 1;
}

message UpdateTemplateRequest {
  int32 template_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string subject = 4;
  optional string title_template = 5;
  optional string message_template = 6;
  optional string html_template = 7;
  repeated string required_variables = 8;
  map<string, string> default_variables = 9;
  optional TemplateConfiguration configuration = 10;
  optional bool is_active = 11;
}

message UpdateTemplateResponse {
  NotificationTemplate template = 1;
}

message DeleteTemplateRequest {
  int32 template_id = 1;
}

message DeleteTemplateResponse {
  bool success = 1;
}

message ListTemplatesRequest {
  farmera.common.PaginationRequest pagination = 1;
  optional farmera.common.NotificationType type_filter = 2;
  optional bool active_only = 3;
  optional string search_query = 4;
}

message ListTemplatesResponse {
  repeated NotificationTemplate templates = 1;
  farmera.common.PaginationResponse pagination = 2;
}

// Sending notifications requests/responses
message SendNotificationRequest {
  string user_id = 1;
  farmera.common.NotificationType type = 2;
  string title = 3;
  string message = 4;
  map<string, string> data = 5;
  farmera.common.NotificationPriority priority = 6;
  repeated farmera.common.NotificationChannel channels = 7;
  string action_url = 8;
  string image_url = 9;
  bool save_notification = 10; // Whether to save to notification history
}

message SendNotificationResponse {
  bool success = 1;
  Notification notification = 2; // If save_notification was true
  repeated string failed_channels = 3;
  map<string, string> delivery_ids = 4; // channel -> provider delivery ID
}

message SendBulkNotificationRequest {
  repeated string user_ids = 1;
  farmera.common.NotificationType type = 2;
  string title = 3;
  string message = 4;
  map<string, string> data = 5;
  farmera.common.NotificationPriority priority = 6;
  repeated farmera.common.NotificationChannel channels = 7;
  string action_url = 8;
  string image_url = 9;
  bool save_notifications = 10;
}

message SendBulkNotificationResponse {
  int32 total_recipients = 1;
  int32 successful_sends = 2;
  int32 failed_sends = 3;
  repeated string failed_user_ids = 4;
  map<string, int32> channel_results = 5; // channel -> success count
}

message SendTemplateNotificationRequest {
  int32 template_id = 1;
  string user_id = 2;
  map<string, string> variables = 3;
  farmera.common.NotificationPriority priority = 4;
  repeated farmera.common.NotificationChannel channels = 5;
  bool save_notification = 6;
}

message SendTemplateNotificationResponse {
  bool success = 1;
  Notification notification = 2;
  repeated string failed_channels = 3;
  map<string, string> delivery_ids = 4;
}

message SendPushNotificationRequest {
  string user_id = 1;
  PushNotificationData push_data = 2;
  map<string, string> custom_data = 3;
  bool save_notification = 4;
}

message SendPushNotificationResponse {
  bool success = 1;
  string delivery_id = 2;
  Notification notification = 3;
  string error_message = 4;
}

message SendEmailNotificationRequest {
  string user_id = 1;
  EmailNotificationData email_data = 2;
  bool save_notification = 3;
}

message SendEmailNotificationResponse {
  bool success = 1;
  string delivery_id = 2;
  Notification notification = 3;
  string error_message = 4;
}

// User preferences requests/responses
message CreateUserPreferencesRequest {
  string user_id = 1;
  repeated ChannelPreference channel_preferences = 2;
  repeated TypePreference type_preferences = 3;
  bool global_enabled = 4;
  string timezone = 5;
  QuietHours quiet_hours = 6;
}

message CreateUserPreferencesResponse {
  UserNotificationPreferences preferences = 1;
}

message GetUserPreferencesRequest {
  string user_id = 1;
}

message GetUserPreferencesResponse {
  UserNotificationPreferences preferences = 1;
}

message UpdateUserPreferencesRequest {
  string user_id = 1;
  repeated ChannelPreference channel_preferences = 2;
  repeated TypePreference type_preferences = 3;
  optional bool global_enabled = 4;
  optional string timezone = 5;
  optional QuietHours quiet_hours = 6;
}

message UpdateUserPreferencesResponse {
  UserNotificationPreferences preferences = 1;
}

message DeleteUserPreferencesRequest {
  string user_id = 1;
}

message DeleteUserPreferencesResponse {
  bool success = 1;
}

// Device management requests/responses
message RegisterDeviceRequest {
  string user_id = 1;
  string device_id = 2;
  string fcm_token = 3;
  string device_type = 4;
  string device_name = 5;
  string app_version = 6;
  string os_version = 7;
  map<string, string> metadata = 8;
}

message RegisterDeviceResponse {
  UserDevice device = 1;
}

message UpdateDeviceRequest {
  string device_id = 1;
  string user_id = 2;
  optional string fcm_token = 3;
  optional string device_name = 4;
  optional string app_version = 5;
  optional string os_version = 6;
  optional bool is_active = 7;
  map<string, string> metadata = 8;
}

message UpdateDeviceResponse {
  UserDevice device = 1;
}

message UnregisterDeviceRequest {
  string device_id = 1;
  string user_id = 2;
}

message UnregisterDeviceResponse {
  bool success = 1;
}

message ListUserDevicesRequest {
  string user_id = 1;
  optional bool active_only = 2;
}

message ListUserDevicesResponse {
  repeated UserDevice devices = 1;
}

// Notification history and tracking requests/responses
message GetNotificationHistoryRequest {
  string user_id = 1;
  farmera.common.PaginationRequest pagination = 2;
  optional farmera.common.NotificationType type_filter = 3;
  optional farmera.common.TimeRange date_range = 4;
  optional bool include_delivery_status = 5;
}

message GetNotificationHistoryResponse {
  repeated Notification notifications = 1;
  farmera.common.PaginationResponse pagination = 2;
}

message MarkNotificationReadRequest {
  int32 notification_id = 1;
  string user_id = 2;
}

message MarkNotificationReadResponse {
  bool success = 1;
  Notification notification = 2;
}

message GetNotificationStatsRequest {
  optional string user_id = 1; // If not provided, returns global stats
  farmera.common.TimeRange date_range = 2;
  optional farmera.common.NotificationType type_filter = 3;
}

message GetNotificationStatsResponse {
  NotificationStatistics stats = 1;
}

message NotificationStatistics {
  int32 total_sent = 1;
  int32 total_delivered = 2;
  int32 total_opened = 3;
  int32 total_clicked = 4;
  map<string, int32> by_channel = 5;
  map<string, int32> by_type = 6;
  double delivery_rate = 7;
  double open_rate = 8;
  double click_rate = 9;
}

// Subscription management requests/responses
message SubscribeRequest {
  string user_id = 1;
  string topic = 2;
  repeated farmera.common.NotificationType types = 3;
  repeated farmera.common.NotificationChannel channels = 4;
  map<string, string> filters = 5;
}

message SubscribeResponse {
  NotificationSubscription subscription = 1;
}

message UnsubscribeRequest {
  string subscription_id = 1;
  string user_id = 2;
}

message UnsubscribeResponse {
  bool success = 1;
}

message ListSubscriptionsRequest {
  string user_id = 1;
  optional bool active_only = 2;
}

message ListSubscriptionsResponse {
  repeated NotificationSubscription subscriptions = 1;
} 